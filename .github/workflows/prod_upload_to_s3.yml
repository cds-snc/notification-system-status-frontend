name: Copy files to Production S3 bucket

on:
  push:
    tags:
      - v[1234].[0-0]+.[0-9]+

permissions:
  id-token: write
  contents: write

env:
  PRODUCTION_ACCOUNT_ID: "296255494825"

jobs:
  s3-backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_KEY_ID }}
          aws-region: ca-central-1

      - name: Get latest tag
        id: latest-tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"

      - name: Get S3 bucket tag
        shell: bash
        run: |
          echo "BUCKET_TAG=$(aws s3api get-bucket-tagging --bucket ${{ secrets.PRODUCTION_SYSTEM_STATUS_BUCKET }} --query TagSet[?Key == 'Version'].Value | [0])" >> $GITHUB_ENV

      - name: Seed S3 bucket tag
        if: ${{ env.BUCKET_TAG }} == "" or ${{ env.BUCKET_TAG }} == "[]"
        shell: bash
        run: |
          aws s3api get-bucket-tagging --bucket ${{ secrets.PRODUCTION_SYSTEM_STATUS_BUCKET }} --tagging 'TagSet=[{Key=Version, Value=v1.0.0}]'
          echo "BUCKET_TAG=v1.0.0" >> $GITHUB_ENV

      - name: Generate Tailwind CSS file
        if: latest-tag.outputs.tag != ${{ env.BUCKET_TAG }}
        run: |
          npm install
          npm run build

      - name: Upload to S3 bucket
        if: latest-tag.outputs.tag != ${{ env.BUCKET_TAG }}
        run: |
          cd ./dist
          aws s3 sync . s3://${{ secrets.PRODUCTION_SYSTEM_STATUS_BUCKET }}

      - name: Update S3 bucket Tag
        if: latest-tag.outputs.tag != ${{ env.BUCKET_TAG }}
        run: |
          aws s3api put-bucket-tagging --bucket ${{ secrets.PRODUCTION_SYSTEM_STATUS_BUCKET }} --tagging {"TagSet":[{"Key": "Version", "Value": "${{ latest-tag.outputs.tag }}"}]}

      - name: Invalidate CloudFront cache
        if: latest-tag.outputs.tag != ${{ env.BUCKET_TAG }}
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.PRODUCTION_SYSTEM_STATUS_CLOUDFRONT_DISTRIBUTION }} --paths "/*"

      - name: Notify Slack channel if this job failed
        if: ${{ failure() }}
        run: |
          json='{"text":"System Status Frontend upload to Production failed <https://github.com/${{ github.repository }}>!"}'
          curl -X POST -H 'Content-type: application/json' --data "$json"  ${{ secrets.SLACK_NOTIFY_DEV_WEDBOOK }}
